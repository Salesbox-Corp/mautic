name: Setup New Environment

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Nome do cliente'
        required: true
      environment:
        description: 'Ambiente (prod/staging/demo)'
        required: true
        default: 'prod'
      create_shared_infra:
        description: 'Criar infraestrutura compartilhada? (true/false)'
        required: true
        default: 'false'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check Required Tools
        run: |
          # Verificar se temos todas as ferramentas necessárias
          command -v mysql >/dev/null 2>&1 || { 
            echo "Instalando MySQL client..."
            sudo apt-get update && sudo apt-get install -y mysql-client
          }
          command -v jq >/dev/null 2>&1 || {
            echo "Instalando jq..."
            sudo apt-get install -y jq
          }

      - name: Validate AWS Access
        run: |
          # Testar acesso ao AWS
          aws sts get-caller-identity
          
          # Verificar permissões necessárias
          aws secretsmanager list-secrets
          aws ssm describe-parameters
          aws rds describe-db-instances
          aws ecs list-clusters

  setup:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create Shared Infrastructure
        if: ${{ github.event.inputs.create_shared_infra == 'true' }}
        run: |
          echo "Criando infraestrutura compartilhada..."
          cd terraform/shared
          terraform init
          terraform plan -out=tfplan
          terraform apply tfplan
          
          # Verificar se RDS foi criado corretamente
          RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
          if [ -z "$RDS_ENDPOINT" ]; then
            echo "Erro: RDS endpoint não encontrado"
            exit 1
          fi
          
          # Salvar credenciais no Secrets Manager
          MASTER_PASSWORD=$(terraform output -raw rds_password)
          aws secretsmanager create-secret \
            --name "/mautic/shared/rds/master" \
            --secret-string "{\"password\":\"${MASTER_PASSWORD}\"}" \
            --description "Credenciais do RDS compartilhado"

      - name: Wait for RDS Available
        run: |
          echo "Aguardando RDS ficar disponível..."
          aws rds wait db-instance-available --db-instance-identifier mautic-shared-db

      - name: Setup Client Secrets
        run: |
          echo "Configurando secrets do cliente..."
          ./scripts/manage-secrets.sh create_client_secrets ${{ github.event.inputs.client }} ${{ github.event.inputs.environment }}

      - name: Setup Client Database
        run: |
          echo "Configurando banco de dados do cliente..."
          ./scripts/manage-database.sh create_client_database ${{ github.event.inputs.client }} ${{ github.event.inputs.environment }}

      - name: Setup Client Infrastructure
        run: |
          echo "Configurando infraestrutura do cliente..."
          ./scripts/setup-client.sh ${{ github.event.inputs.client }} ${{ github.event.inputs.environment }}

      - name: Build and Push Docker Image
        env:
          ECR_REPOSITORY: mautic-${{ github.event.inputs.client }}-${{ github.event.inputs.environment }}
        run: |
          # Login no ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.us-east-1.amazonaws.com

          # Build com cache
          docker build \
            --cache-from $(aws sts get-caller-identity --query Account --output text).dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest \
            -t $ECR_REPOSITORY:latest \
            -t $ECR_REPOSITORY:${{ github.sha }} \
            .

          # Push das imagens
          docker push $(aws sts get-caller-identity --query Account --output text).dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest
          docker push $(aws sts get-caller-identity --query Account --output text).dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:${{ github.sha }}

      - name: Verify Deployment
        run: |
          echo "Verificando recursos criados..."
          
          # Verificar ECS
          CLUSTER_NAME=mautic-${{ github.event.inputs.client }}-${{ github.event.inputs.environment }}-cluster
          SERVICE_NAME=mautic-${{ github.event.inputs.client }}-${{ github.event.inputs.environment }}-service
          
          # Aguardar serviço estabilizar
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME
          
          # Verificar status do serviço
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query 'services[0].status' \
            --output text)
          
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "Erro: Serviço ECS não está ativo"
            exit 1
          fi
          
          # Obter URL do ALB
          ALB_URL=$(aws elbv2 describe-load-balancers \
            --names mautic-${{ github.event.inputs.client }}-${{ github.event.inputs.environment }}-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          echo "Deployment concluído com sucesso!"
          echo "Application URL: http://$ALB_URL"

      - name: Notify Success
        if: success()
        run: |
          echo "Setup completo para ${{ github.event.inputs.client }}/${{ github.event.inputs.environment }}"
          # Aqui você pode adicionar notificações (Slack, Email, etc)

      - name: Notify Failure
        if: failure()
        run: |
          echo "Falha no setup de ${{ github.event.inputs.client }}/${{ github.event.inputs.environment }}"
          # Aqui você pode adicionar notificações de falha 