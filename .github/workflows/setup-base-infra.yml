name: Setup Base Infrastructure

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region para recursos (não alterar sem motivo)'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - 'us-east-2'  # Ohio (recomendado)
          - 'us-east-1'  # Virginia
          - 'us-west-2'  # Oregon
      force_delete_state:
        description: 'Forçar deleção do estado do Terraform'
        required: true
        type: boolean
        default: false

env:
  AWS_REGION: ${{ github.event.inputs.aws_region }}
  FORCE_DELETE_STATE: ${{ github.event.inputs.force_delete_state }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Existing Infrastructure
        id: check
        run: |
          # Verificar se VPC existe
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=mautic-shared-vpc" --query 'Vpcs[0].VpcId' --output text)
          if [ "$VPC_ID" != "None" ] && [ "${{ github.event.inputs.force_delete_state }}" != "true" ]; then
            echo "Infraestrutura base já existe. Use force_delete_state=true para recriar."
            exit 1
          fi

  setup_base:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create Base Infrastructure
        env:
          FORCE_DELETE_STATE: ${{ github.event.inputs.force_delete_state }}
        run: |
          # Adicionar permissão de execução ao script
          chmod +x ./scripts/setup-base-infra.sh
          ./scripts/setup-base-infra.sh ${{ env.AWS_REGION }}

      - name: Verify Base Infrastructure
        run: |
          # Verificar VPC
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=mautic-shared-vpc" --query 'Vpcs[0].VpcId' --output text)
          if [ "$VPC_ID" == "None" ]; then
            echo "Erro: VPC não encontrada"
            exit 1
          fi

          # Verificar RDS
          RDS_STATUS=$(aws rds describe-db-instances --db-instance-identifier mautic-shared-db --query 'DBInstances[0].DBInstanceStatus' --output text)
          if [ "$RDS_STATUS" != "available" ]; then
            echo "Erro: RDS não está disponível"
            exit 1
          fi

  cleanup_on_failure:
    if: failure()
    needs: [setup_base]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup Failed Infrastructure
        run: |
          # Adicionar permissão de execução ao script
          chmod +x ./scripts/setup-base-infra.sh
          ./scripts/setup-base-infra.sh ${{ env.AWS_REGION }} 