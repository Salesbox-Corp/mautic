name: Destroy Client Environment

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region (ex: us-east-2)'
        required: true
        default: 'us-east-2'
      client:
        description: 'Nome do cliente'
        required: true
      environment:
        description: 'Ambiente (prod/staging/demo)'
        required: true
        default: 'demo'
      confirmation:
        description: 'Digite o nome do cliente para confirmar'
        required: true
      force:
        description: 'Forçar destruição mesmo com erros'
        type: boolean
        required: true
        default: false

env:
  AWS_REGION: ${{ github.event.inputs.aws_region }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check Confirmation
        if: inputs.confirmation != inputs.client
        run: |
          echo "Erro: Confirmação não corresponde ao nome do cliente"
          exit 1

  destroy:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Get AWS Account ID
        id: account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=${AWS_ACCOUNT_ID}" >> $GITHUB_OUTPUT

      - name: Destroy Client Infrastructure
        run: |
          AWS_ACCOUNT_ID="${{ steps.account.outputs.account_id }}"
          BUCKET_NAME="mautic-terraform-state-${AWS_ACCOUNT_ID}"
          CLIENT="${{ github.event.inputs.client }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          echo "Destruindo infraestrutura do cliente ${CLIENT}/${ENVIRONMENT}..."

          # Primeiro parar os serviços ECS
          CLUSTER_NAME="mautic-${CLIENT}-${ENVIRONMENT}-cluster"
          SERVICES=$(aws ecs list-services --cluster $CLUSTER_NAME --query 'serviceArns[]' --output text || true)
          if [ ! -z "$SERVICES" ]; then
            echo "Parando serviços ECS..."
            for SERVICE in $SERVICES; do
              aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE --desired-count 0
              aws ecs delete-service --cluster $CLUSTER_NAME --service $SERVICE --force || true
            done
            
            # Aguardar serviços pararem
            echo "Aguardando serviços pararem..."
            sleep 30
          fi

          # Destruir recursos do Terraform
          cd terraform/environments/clients/${CLIENT}/${ENVIRONMENT}
          terraform init \
            -backend-config="bucket=${BUCKET_NAME}" \
            -backend-config="key=clients/${CLIENT}/${ENVIRONMENT}/terraform.tfstate"
          
          terraform destroy -auto-approve || true

      - name: Cleanup Client Resources
        if: always()
        run: |
          CLIENT="${{ github.event.inputs.client }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          CLUSTER_NAME="mautic-${CLIENT}-${ENVIRONMENT}-cluster"

          echo "Limpando recursos do cliente ${CLIENT}/${ENVIRONMENT}..."

          # 1. Limpar ECS
          echo "Limpando ECS..."
          aws ecs delete-cluster --cluster $CLUSTER_NAME || true

          # 2. Limpar Load Balancer
          echo "Limpando Load Balancer..."
          LB_ARN=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?starts_with(LoadBalancerName, 'mautic-${CLIENT}-${ENVIRONMENT}')].LoadBalancerArn" \
            --output text)
          if [ ! -z "$LB_ARN" ]; then
            aws elbv2 delete-load-balancer --load-balancer-arn $LB_ARN || true
            sleep 30
          fi

          # 3. Limpar Target Groups
          echo "Limpando Target Groups..."
          TGS=$(aws elbv2 describe-target-groups \
            --query "TargetGroups[?starts_with(TargetGroupName, 'mautic-${CLIENT}-${ENVIRONMENT}')].TargetGroupArn" \
            --output text)
          for TG in $TGS; do
            aws elbv2 delete-target-group --target-group-arn $TG || true
          done

          # 4. Limpar banco de dados do cliente
          echo "Limpando banco de dados..."
          RDS_CREDENTIALS=$(aws secretsmanager get-secret-value \
            --secret-id "/mautic/shared/rds/master" \
            --query 'SecretString' --output text || true)
          
          if [ ! -z "$RDS_CREDENTIALS" ]; then
            RDS_ENDPOINT=$(aws ssm get-parameter \
              --name "/mautic/shared/rds/endpoint" \
              --query "Parameter.Value" --output text || true)
            
            if [ ! -z "$RDS_ENDPOINT" ]; then
              MASTER_USER=$(echo $RDS_CREDENTIALS | jq -r '.username')
              MASTER_PASSWORD=$(echo $RDS_CREDENTIALS | jq -r '.password')
              
              DB_NAME="mautic_${CLIENT}_${ENVIRONMENT}"
              DB_USER="${DB_NAME}_user"
              
              mysql -h $RDS_ENDPOINT -u $MASTER_USER -p${MASTER_PASSWORD} <<EOF || true
              DROP DATABASE IF EXISTS ${DB_NAME};
              DROP USER IF EXISTS '${DB_USER}'@'%';
              FLUSH PRIVILEGES;
EOF
            fi
          fi

          # 5. Limpar repositório ECR
          echo "Limpando ECR..."
          aws ecr delete-repository \
            --repository-name "mautic-${CLIENT}-${ENVIRONMENT}" \
            --force || true

          # 6. Limpar secrets e parâmetros
          echo "Limpando secrets e parâmetros..."
          aws secretsmanager delete-secret \
            --secret-id "/mautic/${CLIENT}/${ENVIRONMENT}/credentials" \
            --force-delete-without-recovery || true

          aws ssm delete-parameters \
            --names \
              "/mautic/${CLIENT}/${ENVIRONMENT}/config/domain" \
              "/mautic/${CLIENT}/${ENVIRONMENT}/config/email_from" \
              "/mautic/${CLIENT}/${ENVIRONMENT}/database/name" \
              "/mautic/${CLIENT}/${ENVIRONMENT}/database/user" || true

          # 7. Limpar Security Groups
          echo "Limpando Security Groups..."
          SG_IDS=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=mautic-${CLIENT}-${ENVIRONMENT}-*" \
            --query 'SecurityGroups[*].GroupId' --output text)
          for SG in $SG_IDS; do
            aws ec2 delete-security-group --group-id $SG || true
          done

          # 8. Limpar estado do Terraform
          if [ "${{ github.event.inputs.force }}" == "true" ]; then
            echo "Limpando estado do Terraform..."
            AWS_ACCOUNT_ID="${{ steps.account.outputs.account_id }}"
            BUCKET_NAME="mautic-terraform-state-${AWS_ACCOUNT_ID}"
            STATE_KEY="clients/${CLIENT}/${ENVIRONMENT}/terraform.tfstate"
            
            aws s3 rm "s3://${BUCKET_NAME}/${STATE_KEY}" || true
            aws dynamodb delete-item \
              --table-name mautic-terraform-lock \
              --key "{\"LockID\":{\"S\":\"${STATE_KEY}\"}}" \
              --region us-east-1 || true
          fi

      - name: Notify Completion
        if: success()
        run: |
          echo "Cliente ${{ github.event.inputs.client }}/${{ github.event.inputs.environment }} destruído com sucesso" 