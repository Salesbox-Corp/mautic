name: Setup New Client

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region para recursos (não alterar sem motivo)'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - 'us-east-2'  # Ohio (recomendado)
          - 'us-east-1'  # Virginia
          - 'us-west-2'  # Oregon
      client:
        description: 'Nome do cliente'
        required: true
      environment:
        description: 'Ambiente'
        required: true
        type: choice
        default: 'demo'
        options:
          - 'demo'
          - 'staging'
          - 'prd'

env:
  AWS_REGION: ${{ github.event.inputs.aws_region }}
  CLIENT_DIR: terraform/environments/clients/${{ github.event.inputs.client }}/${{ github.event.inputs.environment }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Base Infrastructure
        run: |
          # Verificar se infra base existe
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=mautic-shared-vpc" --query 'Vpcs[0].VpcId' --output text)
          if [ "$VPC_ID" == "None" ]; then
            echo "Erro: Infraestrutura base não encontrada. Execute o workflow setup-base-infra primeiro."
            exit 1
          fi

  setup_client:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install MySQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh
          ls -la scripts/

      - name: Create Client Directory
        run: |
          mkdir -p ${{ env.CLIENT_DIR }}
          chmod -R 755 terraform/environments/clients

      - name: Setup Client
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="mautic-terraform-state-${AWS_ACCOUNT_ID}"

          ./scripts/setup-client.sh \
            ${{ github.event.inputs.client }} \
            ${{ github.event.inputs.environment }} \
            ${{ env.AWS_REGION }}

          cd ${{ env.CLIENT_DIR }}
          
          # Inicializar Terraform com backend configuration
          terraform init \
            -backend-config="bucket=${BUCKET_NAME}" \
            -backend-config="key=clients/${{ github.event.inputs.client }}/${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=mautic-terraform-lock"

          terraform plan -out=tfplan
          terraform apply tfplan 