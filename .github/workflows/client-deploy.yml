name: Client Deployment

on:
  workflow_dispatch:
    inputs:
      client:
        description: 'Cliente para deploy'
        required: true
      environment:
        description: 'Ambiente (demo/staging/prd)'
        required: true
        default: 'demo'
      version:
        description: 'Versão para deploy'
        required: true
        default: 'latest'
      aws_region:
        description: 'AWS Region para recursos'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - 'us-east-2'  # Ohio (recomendado)
          - 'us-east-1'  # Virginia
          - 'us-west-2'  # Oregon
      custom_logo_url:
        description: 'URL do logo personalizado (opcional - será salvo para futuros deploys)'
        required: false
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      client: ${{ steps.extract.outputs.client }}
      environment: ${{ steps.extract.outputs.environment }}
      version: ${{ steps.extract.outputs.version }}
      aws_region: ${{ steps.extract.outputs.aws_region }}
    steps:
      - id: extract
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "client=${{ github.event.inputs.client }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "aws_region=${{ github.event.inputs.aws_region }}" >> $GITHUB_OUTPUT
            echo "custom_logo_url=${{ github.event.inputs.custom_logo_url }}" >> $GITHUB_OUTPUT
          else
            BRANCH=${{ github.ref }}
            if [[ $BRANCH == refs/heads/clients/* ]]; then
              CLIENT=$(echo $BRANCH | cut -d'/' -f3)
              ENV=$(echo $BRANCH | cut -d'/' -f4)
              echo "client=$CLIENT" >> $GITHUB_OUTPUT
              echo "environment=$ENV" >> $GITHUB_OUTPUT
              echo "version=latest" >> $GITHUB_OUTPUT
              echo "aws_region=us-east-2" >> $GITHUB_OUTPUT
              echo "custom_logo_url=" >> $GITHUB_OUTPUT
            fi
          fi

      - id: check
        run: |
          if [[ -n "${{ steps.extract.outputs.client }}" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: prepare
    if: needs.prepare.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare.outputs.client }}-${{ needs.prepare.outputs.environment }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "CLIENT=${{ needs.prepare.outputs.client }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ needs.prepare.outputs.environment }}" >> $GITHUB_ENV
          echo "VERSION=${{ needs.prepare.outputs.version }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ needs.prepare.outputs.aws_region }}" >> $GITHUB_ENV
          echo "ECR_REPOSITORY=mautic-${{ needs.prepare.outputs.client }}-${{ needs.prepare.outputs.environment }}" >> $GITHUB_ENV
          
          # Criar diretório e arquivo de configuração se não existirem
          mkdir -p clients
          if [ ! -f clients/config.json ]; then
            echo '{"clients":{}}' > clients/config.json
          fi
          
          # Se uma URL personalizada foi fornecida, salvar no config.json
          if [ ! -z "${{ github.event.inputs.custom_logo_url }}" ]; then
            LOGO_URL="${{ github.event.inputs.custom_logo_url }}"
            # Verificar se o cliente já existe no config.json
            if jq -e ".clients.\"${{ needs.prepare.outputs.client }}\"" clients/config.json > /dev/null; then
              # Cliente existe, verificar se a URL é diferente
              CURRENT_URL=$(jq -r ".clients.\"${{ needs.prepare.outputs.client }}\".logo_url" clients/config.json)
              if [ "$CURRENT_URL" != "$LOGO_URL" ]; then
                # URL é diferente, atualizar
                jq --arg logo "$LOGO_URL" --arg client "${{ needs.prepare.outputs.client }}" '.clients[$client].logo_url = $logo' clients/config.json > clients/config.json.tmp
                mv clients/config.json.tmp clients/config.json
                
                # Configurar Git
                git config --global user.name "GitHub Actions Bot"
                git config --global user.email "actions@github.com"
                
                # Commit e push das alterações
                git add clients/config.json
                git commit -m "chore: atualiza logo_url para cliente ${{ needs.prepare.outputs.client }}"
                git push origin HEAD:main
              fi
            else
              # Cliente não existe, criar novo
              jq --arg logo "$LOGO_URL" --arg client "${{ needs.prepare.outputs.client }}" '.clients[$client] = {"logo_url": $logo, "environments": {"demo": {}, "staging": {}, "prd": {}}}' clients/config.json > clients/config.json.tmp
              mv clients/config.json.tmp clients/config.json
              
              # Configurar Git
              git config --global user.name "GitHub Actions Bot"
              git config --global user.email "actions@github.com"
              
              # Commit e push das alterações
              git add clients/config.json
              git commit -m "chore: adiciona configuração para cliente ${{ needs.prepare.outputs.client }}"
              git push origin HEAD:main
            fi
            echo "MAUTIC_CUSTOM_LOGO_URL=$LOGO_URL" >> $GITHUB_ENV
          else
            # Tentar ler logo_url do config.json
            if [ -f clients/config.json ]; then
              CLIENT_LOGO_URL=$(jq -r ".clients.\"${{ needs.prepare.outputs.client }}\".logo_url" clients/config.json)
              if [ "$CLIENT_LOGO_URL" != "null" ]; then
                echo "MAUTIC_CUSTOM_LOGO_URL=$CLIENT_LOGO_URL" >> $GITHUB_ENV
              fi
            fi
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Make scripts executable
        run: chmod +x scripts/*.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Deploy
        run: |
          ./scripts/deploy-client.sh $CLIENT $ENVIRONMENT $VERSION $AWS_REGION

      - name: Verify Deployment
        run: |
          # Verificar se o serviço está estável
          ECS_CLUSTER="mautic-${CLIENT}-${ENVIRONMENT}-cluster"
          ECS_SERVICE="mautic-${CLIENT}-${ENVIRONMENT}-service"
          
          # Obter status do serviço
          SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION --query 'services[0].status' --output text)
          
          if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
            echo "Erro: Serviço ECS não está ativo. Status atual: $SERVICE_STATUS"
            exit 1
          fi
          
          # Obter URL do load balancer
          ALB_DNS=$(aws elbv2 describe-load-balancers --names "mautic-${CLIENT}-${ENVIRONMENT}-alb" --region $AWS_REGION --query 'LoadBalancers[0].DNSName' --output text)
          
          echo "Deployment verificado com sucesso!"
          echo "Aplicação disponível em: http://$ALB_DNS" 